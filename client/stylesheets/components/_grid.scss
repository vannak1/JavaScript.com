// *************************************
//
//   Grid
//   -> Alignment divisions
//
// -------------------------------------
//   Template (Haml)
// -------------------------------------
//
// .g[xs|s]
//
//   .g-b[center 1of2|...]
//     / ...
//
//   .g-b[center 1of2|...]
//     / ...
//
// *************************************

// -------------------------------------
//   Base
// -------------------------------------

.g {
  display: flex;
  flex-wrap: wrap;
  margin-left: -$g-gutter;
}

// -------------------------------------
//   Modifiers
// -------------------------------------

// ----- Centered ----- //

.g--centered {
  justify-content: center;
}

// ----- Sizes ----- //

// Extra Small

.g--xs {
  margin-left: -$g-gutter-xs;

  .g-b {
    padding-left: $g-gutter-xs;
  }
}

// Small

.g--s {
  margin-left: -$g-gutter-s;

  .g-b {
    padding-left: $g-gutter-s;
  }
}

// -------------------------------------
//   Scaffolding
// -------------------------------------

.g-b {
  box-sizing: border-box;
  margin: 0;
  padding-left: $g-gutter;
  width: 100%;
}

// Setup

@mixin g-device-type($namespace: "") {
  .g-b--#{$namespace}1of1 {
    width: 100%;
  }

  @for $unit from 1 to $g-columns + 1 {
    @for $column from 1 to $unit {
      .g-b--#{$namespace}#{$column}of#{$unit} {
        width: percentage($column / $unit);
      }

      @for $division from 1 to $unit {
        @if $column % $division == 0 and $unit % $division == 0 {
          .g-b--#{$namespace}#{$column / $division}of#{$unit / $division} {
            @extend .g-b--#{$namespace}#{$column}of#{$unit};
          }
        }
      }
    }
  }
}

@include g-device-type;

@each $device in $g-defaults {
  @media screen and (min-width: nth($device, 2)) {
    @include g-device-type("#{nth($device, 1)}--");
  }
}
